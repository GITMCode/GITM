# Takes in .txt file outputs from thermo_goce.py and compares the results of TWO runs.

# Top-level imports
import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Qt5Agg')
import argparse
from datetime import datetime

# ----------------------------------------------------------------------------------------------------------------------
# Global Plotting Settings:
import matplotlib.pylab as pylab
params = {'legend.fontsize': 'large',
          'figure.figsize': (16, 8),
         'axes.labelsize': 'large',
         'axes.titlesize':'x-large',
         'xtick.labelsize':'x-large',
         'ytick.labelsize':'x-large'}
pylab.rcParams.update(params)
# ----------------------------------------------------------------------------------------------------------------------

# ----------------------------------------------------------------------
# Function to parse input arguments
# ----------------------------------------------------------------------

def parse_args():
    parser = argparse.ArgumentParser(description='Compare the outputs of two GITM runs from thermo_goce.py.')
    parser.add_argument('file1', nargs=1, \
                        help='Output .txt file for first GITM run.')
    parser.add_argument('file2', nargs=1, \
                        help='Output .txt file for second GITM run.')
    parser.add_argument('tag1', nargs=1, help='Label for first GITM run.')
    parser.add_argument('tag2', nargs=1, help='Label for second GITM run.')
    parser.add_argument('file3', nargs=1, help='Output .txt file for third GITM run.', default=None)
    parser.add_argument('tag3', nargs=1, help='Label for third GITM run.', default=None)
    parser.add_argument('loc', nargs='?', metavar='location',\
                        help='Location with which to save the combined figure.', default=os.getcwd())

    args = parser.parse_args()

    return args

# ----------------------------------------------------------------------------------------------------------------------
# Helper functions
# ----------------------------------------------------------------------------------------------------------------------
def percErr(experimental, theoretical):
    return np.divide(np.subtract(experimental, theoretical), np.abs(theoretical)) * 100

def read_thermo(filename):
    """
    Read the output of thermo_goce.py text file, and return information about the contents.
    """
    times = []
    goce_rho = []
    gitm_rho = []
    goce_rho_smoothed = []
    gitm_rho_smoothed = []
    print('Reading data from '+filename+'...')
    with open(filename, 'r') as File:
        lines = File.readlines()
        i = 0
        for line in lines:
            if i == 7:
                altitude = float(line.split()[0])
            if i >= 22:
                # Collect the observations by parsing each line at a time...
                splitted = line.split()
                times.append(
                    datetime(int(splitted[0]), int(splitted[1]), int(splitted[2]), int(splitted[3]), int(splitted[4]),
                             int(splitted[5])))
                goce_rho.append(float(splitted[6]))
                gitm_rho.append(float(splitted[7]))
                goce_rho_smoothed.append(float(splitted[8]))
                gitm_rho_smoothed.append(float(splitted[9]))
            i += 1
    print('Complete!\n')
    return altitude, np.asarray(times), np.asarray(goce_rho), np.asarray(gitm_rho), np.asarray(goce_rho_smoothed), np.asarray(gitm_rho_smoothed)

def combine_plot(file1, file2, tag1, tag2, file3=None, tag3=None, saveLoc=None):
    """
    Take two (or three).txt files generated by thermo_goce.py (corresponding to different GITM runs over the same time period)
    and combine their results into a single figure. Generates and saves a .png to a user-defined location.
    Parameters
    ----------
    file1: str
        The location/name of the first .txt file.
    file2:
        The location/name of the second .txt file.
    tag1: str
        A label for the first GITM run - used in the plot legend.
    tag2: str
        A label for the second GITM run - used in the plot legend.
    file3: str
    	The location/name of the third .txt file. Default is None.
    tag3: str
    	A label for the third GITM run - used in the plot legend. Default is None.
    saveLoc: str
        The full path (incl. the filename) with which to save the figure. Default is None, in which case the figure is
        saved to the current working directory
    Returns
    -------
    Nothing.
    """
    # Read in the contents of the first file:
    altitude1, times1, goce_rho1, gitm_rho1, goce_rho_smoothed1, gitm_rho_smoothed1 = read_thermo(file1)

    # Read in the contents of the second file:
    altitude2, times2, goce_rho2, gitm_rho2, goce_rho_smoothed2, gitm_rho_smoothed2 = read_thermo(file2)
    
    if file3:
        nfiles = 3
        # Read in the contents of the third file:
        altitude3, times3, goce_rho3, gitm_rho3, goce_rho_smoothed3, gitm_rho_smoothed3 = read_thermo(file3)
    else:
    	nfiles = 2
    
    # Make a figure of densities:
    validInds = np.where((times1>= times2[0]) & (times1 <= times2[-1]))[0]
    fig, axs = plt.subplots(1, nfiles, sharex=True, sharey=True)
    fig.set_size_inches(14, 8)
    axs[0].plot(times1[validInds], goce_rho1[validInds], color='b', alpha=0.3)
    axs[0].plot(times1[validInds], goce_rho_smoothed1[validInds], color='b', label='GOCE')
    axs[0].plot(times1[validInds], gitm_rho1[validInds], color='r', alpha=0.3)
    axs[0].plot(times1[validInds], gitm_rho_smoothed1[validInds], color='r', label='GITM ('+tag1+')')
    axs[0].set_xlabel('Time')
    axs[0].set_ylabel('Neutral Density (kg/m$^3$)')
    axs[0].legend(loc='best')
    axs[0].tick_params(axis='x', labelrotation=45)
    axs[1].plot(times2, goce_rho2, color='b', alpha=0.3)
    axs[1].plot(times2, goce_rho_smoothed2, color='b', label='GOCE')
    axs[1].plot(times2, gitm_rho2, color='r', alpha=0.3)
    axs[1].plot(times2, gitm_rho_smoothed2, color='r', label='GITM ('+tag2+')')
    axs[1].set_xlabel('Time')
    axs[1].set_ylabel('Neutral Density (kg/m$^3$)')
    axs[1].legend(loc='best')
    axs[1].tick_params(axis='x', labelrotation=45)
    if nfiles == 3:
    	axs[2].plot(times3, goce_rho3, color='b', alpha=0.3)
    	axs[2].plot(times3, goce_rho_smoothed3, color='b', label='GOCE')
    	axs[2].plot(times3, gitm_rho3, color='r', alpha=0.3)
    	axs[2].plot(times3, gitm_rho_smoothed3, color='r', label='GITM ('+tag3+')')
    	axs[2].set_xlabel('Time')
    	axs[2].set_ylabel('Neutral Density (kg/m$^3$)')
    	axs[2].legend(loc='best')
    	axs[2].tick_params(axis='x', labelrotation=45)
    fig.suptitle('Neutral Density Along GOCE Orbit', fontsize=18, fontweight='bold')
    fig.tight_layout()
    plt.savefig(saveLoc + '/gitm_goce_rho_compare.png', dpi=300)

    # Make a figure for percent differences:
    percDev_1 = percErr(gitm_rho1[validInds], goce_rho1[validInds])
    percDev_smoothed_1 = percErr(gitm_rho_smoothed1[validInds], goce_rho_smoothed1[validInds])
    percDev_2 = percErr(gitm_rho2[validInds], goce_rho2[validInds])
    percDev_smoothed_2 = percErr(gitm_rho_smoothed2[validInds], goce_rho_smoothed2[validInds])
    if nfiles == 3:
    	percDev_3 = percErr(gitm_rho3[validInds], goce_rho3[validInds])
    	percDev_smoothed_3 = percErr(gitm_rho_smoothed3[validInds], goce_rho_smoothed3[validInds])
    f2 = plt.figure(figsize=(10,6))
    plt.axhline(y=0, linestyle='--', color='gray')
    plt.plot(times1[validInds], percDev_1, color='c', alpha=0.3)
    plt.plot(times1[validInds], percDev_smoothed_1, color='c', label='GITM ('+tag1+'): $\mu=$'+str(np.round(np.mean(percDev_smoothed_1), 2)))
    plt.plot(times2, percDev_2, color='m', alpha=0.3)
    plt.plot(times2, percDev_smoothed_2, color='m', label='GITM ('+tag2+'): $\mu=$'+str(np.round(np.mean(percDev_smoothed_2), 2)))
    if nfiles == 3:
    	plt.plot(times3, percDev_3, color='limegreen', alpha=0.3)
    	plt.plot(times3, percDev_smoothed_3, color='forestgreen', label='GITM ('+tag3+'): $\mu=$'+str(np.round(np.mean(percDev_smoothed_3), 3)))
    plt.xlabel('Time')
    plt.ylabel('Percent Error in Neutral Density')
    plt.legend(loc='best')
    plt.title('Neutral Density Error', fontsize=18, fontweight='bold')
    plt.tick_params(axis='x', labelrotation=45)
    plt.tight_layout()
    plt.savefig(saveLoc+'/gitm_goce_rho_error_compare.png', dpi=300)

    return 0

#------------------------------------------------------------------------------
# SCRIPT USE
# example command line input: python thermo_compare.py gitm_compare_GOCE_20110805_v1.txt gitm_compare_GOCE_20110805_vOvation.txt FTA OP

args = parse_args()

fileout = combine_plot(args.file1[0], args.file2[0], args.tag1[0], args.tag2[0], args.file3[0], args.tag3[0], args.loc)
